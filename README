
		LablGL 0.99: Installation and Use instructions

1. Description

  LablGL is an OpenGL interface for Objective Caml. Since it includes
support for the Togl widget, you can comfortably use it with LablTk.

2. Requisites

  * Objective Caml 3.05 or 3.06
  * LablTk (included in Objective Caml, requires Tcl/Tk)
  * OpenGL version 1.0 or 1.1
  * GNU make (for conditionals)

  Objective Caml can be obtained from
	http://caml.inria.fr/ocaml/

  OpenGL (with hardware support) is already on your machine on SGI and
most DEC Alpha systems. It may also be the case with Solaris machines,
and if you do not have it you may obtain it from Sun.
  XFree86 supports the GLX protocol since version 4.0, with hardware
acceleration on some platforms. It is available on most recent Linux
configurations.
  If you are not lucky enough to have built-in OpenGL support, you can
still use Mesa, an openGL-compatible freeware, which works on almost
everything.
	http://www.mesa3d.org/

  LablGl also uses the Togl widget, but the code is already included
in this distribution (version 1.5). You may obtain more information
about Togl at:
	http://www.mesa3d.org/brianp/Togl.html
Note that Togl is only compatible with vanilla Tcl/Tk: specially
patched versions may not work. For instance 8.2.3+ included in old
debian distributions does not work.

3. Installation

Precompiled versions of lablGL are available for windows, and a number
of Linux distributions. In this case you just have to install
necessary packages. Otherwise, compile from source.

  a) Edit Makefile.config

  b) Build LablGL
	% make

  c) For the native code version (you need the native code version of LablTk),
	% make opt

  d) Install LablGL
	% make install

If you don't need Tcl/Tk then (b,c,d) can be replaced by:
	% make allglut
	% make optglut
	% make libinstall

If you don't need Glut then (b,c,d) can be replaced by:
	% make alltk
	% make opttk
	% make install

If you don't need Tcl/Tk nor Glut support (using lablgtk for instance),
then (b,c,d) can be replaced by:
        % make lib
        % make libopt
        % make libinstall

With the windows binary distribution, copy bin\lablgl.bat,
lib\stublibs\*.dll and lib\lablGL to their respective subdirectories
in the OCaml distribution. 

To compile for Windows, just remember to add the include and lib directories to
the corresponding environment variables, or the appropriate switches in the 
makefile. Also, uncomment the necessary lines in the Makefile.config file. 

4. Use

  * The lablgl toplevel
    This is a toplevel, like ocaml, including LablTk, Unix, Str and LablGL.
    You may use it either as a toplevel, or directly to run scripts.
    To run an example, type:
        % lablgl example.ml
    where example.ml is one of: (by order of complexity)
 	simple.ml
	scene.ml
	checker.ml	
	double.ml
	planet.ml
	texturesurf.ml
	gears.ml
	morph3d.ml
	tennis.ml

   Note that some XFree86 do not seem to support single buffer
   rendering. The first 3 examples will not work in that case.

  * compiling and linking
    You need to include labltk.cma, lablgl.cma and togl.cma in your link:
        ocamlc -I +labltk -I +lablGL \
            labltk.cma lablgl.cma togl.cma ... -o program

5. Writing programs

  All of the GL and GLU libraries are available. Read a good book
  about how to use these. Translating from OpenGL to LablGL is rather
  straightforward: there is a LablGL function for each OpenGL one.
  For ease of retrieving, both GL and GLU are cut in smaller modules
  of related functions.  See in appendix A which modules your function
  is in. By default it has the same name, gl or glu omited, and
  capitals replaced by underscores.  When arguments are labelled, the
  names are taken from the man page or the C prototype.

  OpenGL makes heavy use of enumerations, with names starting with
  GL_ or GLU_ . Since their meaning is often overloaded, they are all
  converted to polymorphic variants. In most cases just replace prefix
  by a backquote and convert to low case. When you have a doubt the
  best way is to have a look with OCamlBrowser.

  Using Togl is also straightforward. Everything works like in
  LablTk. You create an openGL widget with Togl.create, and then you
  apply various functions on it. See Togl's README for details.

6. Comments and bug reports

   mailto:garrigue@kurims.kyoto-u.ac.jp

   This library has been tested on a number of programs, but this is
   far from testing all of OpenGL functionality. There are bugs, but
   at least we didn't find any in our examples.

A. Modules

   There are 11 modules for GL and 5 modules for GLU.
   Modules marked with (*) contain LablGL specific functions.

Gl: Common data types and functions.
   glFlush
   glFinish
   glEnable
   glDisable
   glIsEnabled

GlClear: Clearing functions.
   glClear
   glClearAccum		-> accum
   glClearColor		-> color
   glClearDepth		-> depth
   glClearIndex		-> index
   glClearStencil	-> stencil

GlDraw: Drawing functions.
   glBegin		-> begins
   glColor
   glCullFace
   glEdgeFlag
   glEnd		-> ends
   glFrontFace
   glIndex
   glLineStipple
   glLineWidth
   glNormal
   glPointSize
   glPolygonMode
   glPolygonStipple
   glRect
   glShadeModel
   glVertex
   glViewport

GlFunc: Filtering functions.
   glAccum
   glAlphaFunc
   glBlendFunc
   glColorMask
   glDepthFunc
   glDepthMask
   glDrawBuffer
   glIndexMask
   glLogicOp   
   glReadBuffer   
   glStencilFunc
   glStencilMask
   glStencilOp

GlLight: Lighting functions.
   glColorMaterial
   glFog
   glLight
   glLightModel (gl 1.2 with `color_control)
   glMaterial

GlList: Call list functions. (*)
   glCallList		-> call
   glCallLists
   glDeleteLists
   glEndList		-> ends
   glGenLists
   glIsList
   glNewList		-> begins

GlMap: Map and meshes functions.
   glEvalCoord1
   glEvalCoord2
   glEvalMesh1
   glEvalMesh2
   glEvalPoint1
   glEvalPoint2
   glMap1
   glMap2
   glMapGrid1		-> grid1
   glMapGrid2		-> grid2

GlMat: Matrix functions. (*)
   glFrustum
   glLoadIdentity
   glLoadMatrix		       -> load
   glLoadTransposeMatrix -> load_transpose (gl 1.3)
   glMatrixMode	 	       -> mode
   glMultMatrix		       -> mult
   glMultTransposeMatrix -> mult_transpose (gl 1.3)
   glOrtho
   glPopMatrix	      	 -> pop
   glPushMatrix	      	 -> push
   glRotate
   glScale
   glTranslate
   glGetDoublev          -> get_matrix (only for modelview, projection, and texture)

GlMisc: Miscellanous functions.
   glClipPlane
   glGetString
   glHint
   glInitNames
   glLoadName
   glPassThrough
   glPopAttrib
   glPopName
   glPushAttrib
   glPushName
   glRenderMode
   glSelectBuffer

GlPix: Rasterized pixel functions. (*)
   glBitmap
   glCopyPixels		-> copy
   glDrawPixels		-> draw
   glPixelMap		-> map
   glPixelStore		-> store
   glPixelTransfer	-> transfer
   glPixelZoom		-> zoom
   glRasterPos
   glReadPixels		-> read

GlTex: Texturing functions.
   glTexCoord		-> coord
   glTexEnv		-> env
   glTexGen		-> gen
   glTexImage1D		-> image1d
   glTexImage2D		-> image2d
   glTexParameter	-> parameter (gl 1.4 with generate_mipmap)

GluMat: GLU matrix functions.
   gluLookAt
   gluOrtho2D
   gluPerspective
   gluPickMatrix
   gluProject
   gluUnProject

GluMisc: GLU miscellanous functions.
   gluBuild1DMipmaps
   gluBuild2DMipmaps
   gluGetString
   gluScaleImage

GluNurbs: Nurbs functions.
   gluBeginCurve
   gluBeginSurface
   gluBeginTrim
   gluEndCurve
   gluEndSurface
   gluEndTrim
   gluLoadSamplingMatrices
   gluNewNurbsRenderer	-> create
   gluNurbsCurve	-> curve
   gluNurbsProperty	-> property
   gluNurbsPwlCurve	-> pwl_curve
   gluNurbsSurface	-> surface

GluQuadric: Quadric functions.
   gluCylinder
   gluDisk
   gluNewQuadric	-> create
   gluPartialDisk
   gluQuadricDrawStyle	-> draw_style
   gluQuadricNormals	-> normals
   gluQuadricOrientation -> orientation
   gluQuadricTexture	-> texture
   gluSphere

GluTess: Tessalating functions.
   gluBeginPolygon	-> begins
   gluEndPolygon	-> ends
   gluNewTess		-> create
   gluTessBeginContour	-> begin_contour (glu 1.2)
   gluTessBeginPolygon	-> begin_polygon (glu 1.2)
   gluTessEndContour	-> end_contour	 (glu 1.2)
   gluTessEndPolygon	-> end_polygon	 (glu 1.2)
   gluTessNormal	-> normal	 (glu 1.2)
   gluTessProperty	-> property	 (glu 1.2)
   gluTessVertex	-> vertex

$Id: README,v 1.26 2003-09-25 13:54:01 raffalli Exp $
