/* camlgl.idl
   Derived from gl.h, changes copyright (c) 2003 Issac Trotts. */

/* 
 * From the original header file:
 * Mesa 3-D graphics library
 * Version:  3.4
 *
 * Copyright (C) 1999-2000  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


#include "gl_constants.idl"
quote(C,"#include <GL/gl.h>"); 
quote(C,"#include <assert.h>");

void glClearIndex( float c );
void glClearColor( float red, float green, float blue, float alpha );
void glClear( unsigned int mask );
void glIndexMask( unsigned int mask );
void glColorMask( boolean red, boolean green, boolean blue, boolean alpha );
void glAlphaFunc( unsigned int func, float ref );
void glBlendFunc( unsigned int sfactor, unsigned int dfactor );
void glLogicOp( unsigned int opcode );
void glCullFace( unsigned int mode );
void glFrontFace( unsigned int mode );
void glPointSize( float size );
void glLineWidth( float width );
void glLineStipple( int factor, unsigned short pattern );
void glPolygonMode( unsigned int face, unsigned int mode );
void glPolygonOffset( float factor, float units );
void glPolygonStipple( [in] unsigned char mask[1024] );
void glGetPolygonStipple( [out] unsigned char mask[1024] );
void glEdgeFlag( boolean flag );
void glEdgeFlagv( [in] unsigned char flag[1] );
void glScissor( int x, int y, int width, int height);
void glClipPlane( unsigned int plane, [in] double equation[4] );
void glGetClipPlane( unsigned int plane, [out] double equation[4] );
void glDrawBuffer( unsigned int mode );
void glReadBuffer( unsigned int mode );
void glEnable( unsigned int cap );
void glDisable( unsigned int cap );
boolean glIsEnabled( unsigned int cap );
void glEnableClientState( unsigned int cap );
void glDisableClientState( unsigned int cap );
void _glGetBooleanv( unsigned int pname, [out,size_is(num_params)] unsigned char params[], int num_params )
    quote(call, "glGetBooleanv(pname, params);");
void _glGetDoublev( unsigned int pname, [out,size_is(num_params)] double params[], int num_params)
    quote(call, "glGetDoublev(pname, params);");
    quote(mli, "val glGetDoublev : int -> int -> float array");
    quote(ml, "external glGetDoublev : int -> int -> float array = \"camlidl_gL__glGetDoublev\"");
void _glGetFloatv( unsigned int pname, [out,size_is(num_params)] float params[], int num_params )
    quote(call, "glGetFloatv(pname, params);");
    quote(mli, "val glGetFloatv : int -> int -> float array");
    quote(ml, "external glGetFloatv : int -> int -> float array = \"camlidl_gL__glGetFloatv\"");
void _glGetIntegerv( unsigned int pname, [out,size_is(num_params)] int params[], int num_params )
    quote(call, "glGetIntegerv(pname, params);");
    quote(mli, "val glGetIntegerv : int -> int -> int array");
    quote(ml, "external glGetIntegerv : int -> int -> int array = \"camlidl_gL__glGetIntegerv\"");
void glPushAttrib( unsigned int mask );
void glPopAttrib( void );
void glPushClientAttrib( unsigned int mask );
void glPopClientAttrib( void );
int glRenderMode( unsigned int mode );
unsigned int glGetError( void );
[string] const char * glGetString( unsigned int name );
void glFinish( void );
void glFlush( void );
void glHint( unsigned int target, unsigned int mode );
void glClearDepth( double depth );
void glDepthFunc( unsigned int func );
void glDepthMask( boolean flag );
void glDepthRange( double near_val, double far_val );
void glClearAccum( float red, float green, float blue, float alpha );
void glAccum( unsigned int op, float value );
void glMatrixMode( unsigned int mode );
void glOrtho( double left, double right, double bottom, double top, double near_val, double far_val );
void glFrustum( double left, double right, double bottom, double top, double near_val, double far_val );
void glViewport( int x, int y, int width, int height );
void glPushMatrix( void );
void glPopMatrix( void );
void glLoadIdentity( void );
void glLoadMatrixd( [in] double m[16] );
void glLoadMatrixf( [in] float m[16] );
void glMultMatrixd( [in] double m[16] );
void glMultMatrixf( [in] float m[16] );
void glRotated( double angle, double x, double y, double z );
void glRotatef( float angle, float x, float y, float z );
void glScaled( double x, double y, double z );
void glScalef( float x, float y, float z );
void glTranslated( double x, double y, double z );
void glTranslatef( float x, float y, float z );
boolean glIsList( unsigned int list );
void glDeleteLists( unsigned int list, int range );
unsigned int glGenLists( int range );
void glNewList( unsigned int list, unsigned int mode );
void glEndList( void );
void glCallList( unsigned int list );
void glCallLists( int n, [in,size_is(n)] int lists[])
    quote(call, "glCallLists(n, GL_INT, lists);");
void glListBase( unsigned int base );
void glBegin( unsigned int mode );
void glEnd( void );
void glVertex2d( double x, double y );
void glVertex2f( float x, float y );
void glVertex2i( int x, int y );
void glVertex2s( short x, short y );
void glVertex3d( double x, double y, double z );
void glVertex3f( float x, float y, float z );
void glVertex3i( int x, int y, int z );
void glVertex3s( short x, short y, short z );
void glVertex4d( double x, double y, double z, double w );
void glVertex4f( float x, float y, float z, float w );
void glVertex4i( int x, int y, int z, int w );
void glVertex4s( short x, short y, short z, short w );
void glVertex2dv( [in] double v[2] );
void glVertex2fv( [in] float v[2] );
void glVertex2iv( [in] int v[2] );
void glVertex2sv( [in] short v[2] );
void glVertex3dv( [in] double v[3] );
void glVertex3fv( [in] float v[3] );
void glVertex3iv( [in] int v[3] );
void glVertex3sv( [in] short v[3] );
void glVertex4dv( [in] double v[4] );
void glVertex4fv( [in] float v[4] );
void glVertex4iv( [in] int v[4] );
void glVertex4sv( [in] short v[4] );
void glNormal3b( signed char nx, signed char ny, signed char nz );
void glNormal3d( double nx, double ny, double nz );
void glNormal3f( float nx, float ny, float nz );
void glNormal3i( int nx, int ny, int nz );
void glNormal3s( short nx, short ny, short nz );
void glNormal3bv( [in] signed char v[3] );
void glNormal3dv( [in] double v[3] );
void glNormal3fv( [in] float v[3] );
void glNormal3iv( [in] int v[3] );
void glNormal3sv( [in] short v[3] );
void glIndexd( double c );
void glIndexf( float c );
void glIndexi( int c );
void glIndexs( short c );
void glIndexub( unsigned char c );

void glIndexdv( [in] double c[1] );
void glIndexfv( [in] float c[1] );
void glIndexiv( [in] int c[1] );
void glIndexsv( [in] short c[1] );
void glIndexubv( [in] unsigned char c[1] );

void glColor3b( signed char red, signed char green, signed char blue );
void glColor3d( double red, double green, double blue );
void glColor3f( float red, float green, float blue );
void glColor3i( int red, int green, int blue );
void glColor3s( short red, short green, short blue );
void glColor3ub( unsigned char red, unsigned char green, unsigned char blue );
void glColor3ui( unsigned int red, unsigned int green, unsigned int blue );
void glColor3us( unsigned short red, unsigned short green, unsigned short blue );
void glColor4b( signed char red, signed char green, signed char blue, signed char alpha );
void glColor4d( double red, double green, double blue, double alpha );
void glColor4f( float red, float green, float blue, float alpha );
void glColor4i( int red, int green, int blue, int alpha );
void glColor4s( short red, short green, short blue, short alpha );
void glColor4ub( unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha );
void glColor4ui( unsigned int red, unsigned int green, unsigned int blue, unsigned int alpha );
void glColor4us( unsigned short red, unsigned short green, unsigned short blue, unsigned short alpha );
void glColor3bv( [in] signed char v[3] );
void glColor3dv( [in] double v[3] );
void glColor3fv( [in] float v[3] );
void glColor3iv( [in] int v[3] );
void glColor3sv( [in] short v[3] );
void glColor3ubv( [in] unsigned char v[3] );
void glColor3uiv( [in] unsigned int v[3] );
void glColor3usv( [in] unsigned short v[3] );
void glColor4bv( [in] signed char v[4] );
void glColor4dv( [in] double v[4] );
void glColor4fv( [in] float v[4] );
void glColor4iv( [in] int v[4] );
void glColor4sv( [in] short v[4] );
void glColor4ubv( [in] unsigned char v[4] );
void glColor4uiv( [in] unsigned int v[4] );
void glColor4usv( [in] unsigned short v[4] );
void glTexCoord1d( double s );
void glTexCoord1f( float s );
void glTexCoord1i( int s );
void glTexCoord1s( short s );
void glTexCoord2d( double s, double t );
void glTexCoord2f( float s, float t );
void glTexCoord2i( int s, int t );
void glTexCoord2s( short s, short t );
void glTexCoord3d( double s, double t, double r );
void glTexCoord3f( float s, float t, float r );
void glTexCoord3i( int s, int t, int r );
void glTexCoord3s( short s, short t, short r );
void glTexCoord4d( double s, double t, double r, double q );
void glTexCoord4f( float s, float t, float r, float q );
void glTexCoord4i( int s, int t, int r, int q );
void glTexCoord4s( short s, short t, short r, short q );
void glTexCoord1dv( [in] double v[1] );
void glTexCoord1fv( [in] float v[1] );
void glTexCoord1iv( [in] int v[1] );
void glTexCoord1sv( [in] short v[1] );
void glTexCoord2dv( [in] double v[2] );
void glTexCoord2fv( [in] float v[2] );
void glTexCoord2iv( [in] int v[2] );
void glTexCoord2sv( [in] short v[2] );
void glTexCoord3dv( [in] double v[3] );
void glTexCoord3fv( [in] float v[3] );
void glTexCoord3iv( [in] int v[3] );
void glTexCoord3sv( [in] short v[3] );
void glTexCoord4dv( [in] double v[4] );
void glTexCoord4fv( [in] float v[4] );
void glTexCoord4iv( [in] int v[4] );
void glTexCoord4sv( [in] short v[4] );
void glRasterPos2d( double x, double y );
void glRasterPos2f( float x, float y );
void glRasterPos2i( int x, int y );
void glRasterPos2s( short x, short y );
void glRasterPos3d( double x, double y, double z );
void glRasterPos3f( float x, float y, float z );
void glRasterPos3i( int x, int y, int z );
void glRasterPos3s( short x, short y, short z );
void glRasterPos4d( double x, double y, double z, double w );
void glRasterPos4f( float x, float y, float z, float w );
void glRasterPos4i( int x, int y, int z, int w );
void glRasterPos4s( short x, short y, short z, short w );
void glRasterPos2dv( [in] double v[2] );
void glRasterPos2fv( [in] float v[2] );
void glRasterPos2iv( [in] int v[2] );
void glRasterPos2sv( [in] short v[2] );
void glRasterPos3dv( [in] double v[3] );
void glRasterPos3fv( [in] float v[3] );
void glRasterPos3iv( [in] int v[3] );
void glRasterPos3sv( [in] short v[3] );
void glRasterPos4dv( [in] double v[4] );
void glRasterPos4fv( [in] float v[4] );
void glRasterPos4iv( [in] int v[4] );
void glRasterPos4sv( [in] short v[4] );
void glRectd( double x1, double y1, double x2, double y2 );
void glRectf( float x1, float y1, float x2, float y2 );
void glRecti( int x1, int y1, int x2, int y2 );
void glRects( short x1, short y1, short x2, short y2 );
void glRectdv( [in] double v1[2], [in] double v2[2] );
void glRectfv( [in] float v1[2], [in] float v2[2] );
void glRectiv( [in] int v1[2], [in] int v2[2] );
void glRectsv( [in] short v1[2], [in] short v2[2] );

void glVertexPointer( int size, unsigned int type, int stride, [in,bigarray] void *ptr );
void glNormalPointer( unsigned int type, int stride, [in,bigarray] void *ptr );
void glColorPointer( int size, unsigned int type, int stride, [in,bigarray] void *ptr );
void glIndexPointer( unsigned int type, int stride, [in,bigarray] void *ptr );
void glTexCoordPointer( int size, unsigned int type, int stride, [in,bigarray] void *ptr );
void glEdgeFlagPointer( int stride, [in,bigarray] void *ptr );
//void glGetPointerv( unsigned int pname, void **params );
void glArrayElement( int i );
void glDrawArrays( unsigned int mode, int first, int count );
void glDrawElements( unsigned int mode, int count, unsigned int type, [in,bigarray] void *indices );
void glInterleavedArrays( unsigned int format, int stride, [in,bigarray] void *pointer );
void glShadeModel( unsigned int mode );
void glLightf( unsigned int light, unsigned int pname, float param );
void glLighti( unsigned int light, unsigned int pname, int param );
void glLightfv( unsigned int light, unsigned int pname, [in] float params[]);
void glLightiv( unsigned int light, unsigned int pname, [in] int params[]);
void glGetLightfv( unsigned int light, unsigned int pname, [in] float
    params[]);
void glGetLightiv( unsigned int light, unsigned int pname, [in] int params[]);
void glLightModelf( unsigned int pname, float param );
void glLightModeli( unsigned int pname, int param );
void glLightModelfv( unsigned int pname, [in] float params[]);
void glLightModeliv( unsigned int pname, [in] int params[]);
void glMaterialf( unsigned int face, unsigned int pname, float param );
void glMateriali( unsigned int face, unsigned int pname, int param );
void glMaterialfv( unsigned int face, unsigned int pname, [in] float params[] );
void glMaterialiv( unsigned int face, unsigned int pname, [in] int params[] );
void glGetMaterialfv( unsigned int face, unsigned int pname, [in] float params[] );
void glGetMaterialiv( unsigned int face, unsigned int pname, [in] int params[] );
void glColorMaterial( unsigned int face, unsigned int mode );
void glPixelZoom( float xfactor, float yfactor );
void glPixelStoref( unsigned int pname, float param );
void glPixelStorei( unsigned int pname, int param );
void glPixelTransferf( unsigned int pname, float param );
void glPixelTransferi( unsigned int pname, int param );
void glPixelMapfv( unsigned int map, int mapsize, [in] float values[] );
void glPixelMapuiv( unsigned int map, int mapsize, [in] unsigned int values[] );
void glPixelMapusv( unsigned int map, int mapsize, [in] unsigned short values[] );
void glGetPixelMapfv( unsigned int map, float values[] );
void glGetPixelMapuiv( unsigned int map, unsigned int values[] );
void glGetPixelMapusv( unsigned int map, unsigned short values[] );
void glBitmap( int width, int height, float xorig, float yorig, float xmove,
    float ymove, [in] unsigned char bitmap[] );
void glReadPixels( int x, int y, int width, int height, unsigned int format,
    unsigned int type, [in,out,bigarray] void *pixels );
void glDrawPixels( int width, int height, unsigned int format, 
    unsigned int type, [in,bigarray] void *pixels );
void glCopyPixels( int x, int y, int width, int height, unsigned int type );
void glStencilFunc( unsigned int func, int ref, unsigned int mask );
void glStencilMask( unsigned int mask );
void glStencilOp( unsigned int fail, unsigned int zfail, unsigned int zpass );
void glClearStencil( int s );
void glTexGend( unsigned int coord, unsigned int pname, double param );
void glTexGenf( unsigned int coord, unsigned int pname, float param );
void glTexGeni( unsigned int coord, unsigned int pname, int param );
void glTexGendv( unsigned int coord, unsigned int pname, [in] double params[] );
void glTexGenfv( unsigned int coord, unsigned int pname, [in] float params[] );
void glTexGeniv( unsigned int coord, unsigned int pname, [in] int params[] );
void glGetTexGendv( unsigned int coord, unsigned int pname, [in] double params[] );
void glGetTexGenfv( unsigned int coord, unsigned int pname, [in] float params[] );
void glGetTexGeniv( unsigned int coord, unsigned int pname, [in] int params[] );
void glTexEnvf( unsigned int target, unsigned int pname, float param );
void glTexEnvi( unsigned int target, unsigned int pname, int param );
void glTexEnvfv( unsigned int target, unsigned int pname, [in] float params[] );
void glTexEnviv( unsigned int target, unsigned int pname, [in] int params[] );
void glGetTexEnvfv( unsigned int target, unsigned int pname, float params[] );
void glGetTexEnviv( unsigned int target, unsigned int pname, int params[] );
void glTexParameterf( unsigned int target, unsigned int pname, float param );
void glTexParameteri( unsigned int target, unsigned int pname, int param );
void glTexParameterfv( unsigned int target, unsigned int pname, [in] float params[] );
void glTexParameteriv( unsigned int target, unsigned int pname, [in] int params[] );
void glGetTexParameterfv( unsigned int target, unsigned int pname, float params[]);
void glGetTexParameteriv( unsigned int target, unsigned int pname, int params[] );
void glGetTexLevelParameterfv( unsigned int target, int level, 
    unsigned int pname, [in,out,bigarray] float params[] );
void glGetTexLevelParameteriv( unsigned int target, int level, 
    unsigned int pname, [in,out,*int32,bigarray] int params[] );
void glTexImage1D( unsigned int target, int level, int internalFormat, int
    width, int border, unsigned int format, unsigned int type, [in,bigarray]
    void *pixels );
void glTexImage2D( unsigned int target, int level, int internalFormat, int
    width, int height, int border, unsigned int format, unsigned int type, 
    [in,bigarray] void *pixels);
void glGetTexImage( unsigned int target, int level, unsigned int format, unsigned int type, 
    [in,bigarray] void *pixels );
void glGenTextures( int n, [in,out,length_is(n),*int32,bigarray] unsigned int textures[]);
int glGenTexture() 
    quote(call,
        "{ GLuint my_uint; glGenTextures(1,&my_uint); _res=(int) my_uint; }");
void glDeleteTextures( int n, [in,size_is(n)] unsigned int textures[]);
void glBindTexture( unsigned int target, unsigned int texture );
void glPrioritizeTextures( int n, [in,size_is(n)] unsigned int textures[],
    [in,size_is(n)] float priorities[] );
boolean glAreTexturesResident( int n, 
    [in,size_is(n)] unsigned int textures[], 
    [out,size_is(n)] unsigned char residences[] );
boolean glIsTexture( unsigned int texture );
void glTexSubImage1D( unsigned int target, int level, int xoffset, int
    width, unsigned int format, unsigned int type, [in,bigarray] void *pixels );
void glTexSubImage2D( unsigned int target, int level, int xoffset, int
    yoffset, int width, int height, unsigned int format, unsigned int type, 
    [in,bigarray] void *pixels );
void glCopyTexImage1D( unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int border );
void glCopyTexImage2D( unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border );
void glCopyTexSubImage1D( unsigned int target, int level, int xoffset, int x, int y, int width );
void glCopyTexSubImage2D( unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );
void glMap1d( unsigned int target, double u1, double u2, int stride, int
order, [in] double points[] );
void glMap1f( unsigned int target, float u1, float u2, int stride, int order,
[in] float points[] );
void glMap2d( unsigned int target, double u1, double u2, int ustride, int
    uorder, double v1, double v2, int vstride, int vorder, [in,bigarray] double
    points[] );
void glMap2f( unsigned int target, float u1, float u2, int ustride, 
    int uorder, float v1, float v2, int vstride, int vorder, [in,bigarray] float
    points[] );
void glGetMapdv( unsigned int target, unsigned int query, [in] double v[] );
void glGetMapfv( unsigned int target, unsigned int query, [in] float v[] );
void glGetMapiv( unsigned int target, unsigned int query, [in] int v[] );
void glEvalCoord1d( double u );
void glEvalCoord1f( float u );
void glEvalCoord1dv( [in] double u[1] );
void glEvalCoord1fv( [in] float u[1] );
void glEvalCoord2d( double u, double v );
void glEvalCoord2f( float u, float v );
void glEvalCoord2dv( [in] double u[2] );
void glEvalCoord2fv( [in] float u[2] );
void glMapGrid1d( int un, double u1, double u2 );
void glMapGrid1f( int un, float u1, float u2 );
void glMapGrid2d( int un, double u1, double u2, int vn, double v1, double v2 );
void glMapGrid2f( int un, float u1, float u2, int vn, float v1, float v2 );
void glEvalPoint1( int i );
void glEvalPoint2( int i, int j );
void glEvalMesh1( unsigned int mode, int i1, int i2 );
void glEvalMesh2( unsigned int mode, int i1, int i2, int j1, int j2 );
void glFogf( unsigned int pname, float param );
void glFogi( unsigned int pname, int param );
void glFogfv( unsigned int pname, [in,size_is(nparams)] float params[], int nparams )
    quote(call, "glFogfv(pname, params);");
void glFogiv( unsigned int pname, [in,size_is(nparams)] int params[], int nparams )
    quote(call, "glFogiv(pname, params);");
void glFeedbackBuffer( int size, unsigned int type, [out,size_is(size)] float buffer[] );
void glPassThrough( float token );

void glSelectBuffer( int size, [in,out,length_is(size),*int32,bigarray] int buffer[] );
// bitwise_int64of32 is needed to get some of the values returned by
// glSelectBuffer, since unsigned 32-bit integers do not seem to be supported
// in OCaml.
quote(mli,"val bitwise_int64of32 : int32 -> int64")
quote(ml,"
let bitwise_int64of32 i32 =
   Int64.add 
    (if i32<Int32.zero then Int64.shift_left Int64.one 32 else Int64.zero) 
    (Int64.of_int32 (Int32.logand i32 (Int32.of_int 0x7fffffff)));;
");

void glInitNames( void );
void glLoadName( unsigned int name );
void glPushName( unsigned int name );
void glPopName( void );
void glDrawRangeElements( unsigned int mode, unsigned int start, unsigned
    int end, int count, unsigned int type, [in,bigarray] void *indices );
void glTexImage3D( unsigned int target, int level, int internalFormat, int
    width, int height, int depth, int border, unsigned int format, unsigned int
    type, [in,bigarray] void *pixels );
void glTexSubImage3D( unsigned int target, int level, int xoffset, int
    yoffset, int zoffset, int width, int height, int depth, unsigned int format,
    unsigned int type, [in,bigarray] void *pixels);
void glCopyTexSubImage3D( unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );
void glColorTable( unsigned int target, unsigned int internalformat, int
    width, unsigned int format, unsigned int type, [in,bigarray] void *table );
void glColorSubTable( unsigned int target, int start, int count, unsigned
    int format, unsigned int type, [in,bigarray] void *data );
void glColorTableParameteriv(unsigned int target, unsigned int pname, [in] int params[]);
void glColorTableParameterfv(unsigned int target, unsigned int pname, [in] float params[]);
void glCopyColorSubTable( unsigned int target, int start, int x, int y, int width );
void glCopyColorTable( unsigned int target, unsigned int internalformat, int x, int y, int width );
void glGetColorTable( unsigned int target, unsigned int format, unsigned int type, 
    [in,bigarray] void *table );
void glGetColorTableParameterfv( unsigned int target, unsigned int pname, [in] float params[] );
void glGetColorTableParameteriv( unsigned int target, unsigned int pname, [in] int params[] );
void glBlendEquation( unsigned int mode );
void glBlendColor( float red, float green, float blue, float alpha );
void glHistogram( unsigned int target, int width, unsigned int internalformat,
    boolean sink );
void glResetHistogram( unsigned int target );
void glGetHistogram( unsigned int target, boolean reset, unsigned int
    format, unsigned int type, [in,out,bigarray] void *values );
void glGetHistogramParameterfv( unsigned int target, unsigned int pname, [in] float params[] );
void glGetHistogramParameteriv( unsigned int target, unsigned int pname, [in] int params[] );
void glMinmax( unsigned int target, unsigned int internalformat, boolean sink );
void glResetMinmax( unsigned int target );
void glGetMinmax( unsigned int target, unsigned char reset, unsigned int
    format, unsigned int types, [in,out,bigarray] void *values );
void glGetMinmaxParameterfv( unsigned int target, unsigned int pname, [in] float params[] );
void glGetMinmaxParameteriv( unsigned int target, unsigned int pname, [in] int params[] );
void glConvolutionFilter1D( unsigned int target, unsigned int
    internalformat, int width, unsigned int format, unsigned int type, [in,bigarray] void *image );
void glConvolutionFilter2D( unsigned int target, unsigned int
    internalformat, int width, int height, unsigned int format, unsigned int
    type, [in,bigarray] void *image );
void glConvolutionParameterf( unsigned int target, unsigned int pname, float params );
void glConvolutionParameterfv( unsigned int target, unsigned int pname, [in] float params[] );
void glConvolutionParameteri( unsigned int target, unsigned int pname, int params );
void glConvolutionParameteriv( unsigned int target, unsigned int pname, [in] int params[] );
void glCopyConvolutionFilter1D( unsigned int target, unsigned int internalformat, int x, int y, int width );
void glCopyConvolutionFilter2D( unsigned int target, unsigned int internalformat, int x, int y, int width, int height);
void glGetConvolutionFilter( unsigned int target, unsigned int format,
    unsigned int type, [in,bigarray] void *image );
void glGetConvolutionParameterfv( unsigned int target, unsigned int pname,
    [in] float params[] );
void glGetConvolutionParameteriv( unsigned int target, unsigned int pname,
    [in] int params[] );
void glSeparableFilter2D( unsigned int target, unsigned int internalformat,
    int width, int height, unsigned int format, unsigned int type, 
    [in,bigarray] void *row, [in,bigarray] void *column );
void glGetSeparableFilter( unsigned int target, unsigned int format, unsigned int type, 
    [in,out,bigarray] void *row, [in,out,bigarray] void *column, [in,out,bigarray] void *span );
void glActiveTextureARB(unsigned int texture);
void glClientActiveTextureARB(unsigned int texture);
void glMultiTexCoord1dARB(unsigned int target, double s);
void glMultiTexCoord1dvARB(unsigned int target, [in] double v[]);
void glMultiTexCoord1fARB(unsigned int target, float s);
void glMultiTexCoord1fvARB(unsigned int target, [in] float v[]);
void glMultiTexCoord1iARB(unsigned int target, int s);
void glMultiTexCoord1ivARB(unsigned int target, [in] int v[]);
void glMultiTexCoord1sARB(unsigned int target, short s);
void glMultiTexCoord1svARB(unsigned int target, [in] short v[]);
void glMultiTexCoord2dARB(unsigned int target, double s, double t);
void glMultiTexCoord2dvARB(unsigned int target, [in] double v[]);
void glMultiTexCoord2fARB(unsigned int target, float s, float t);
void glMultiTexCoord2fvARB(unsigned int target, [in] float v[]);
void glMultiTexCoord2iARB(unsigned int target, int s, int t);
void glMultiTexCoord2ivARB(unsigned int target, [in] int v[]);
void glMultiTexCoord2sARB(unsigned int target, short s, short t);
void glMultiTexCoord2svARB(unsigned int target, [in] short v[]);
void glMultiTexCoord3dARB(unsigned int target, double s, double t, double r);
void glMultiTexCoord3dvARB(unsigned int target, [in] double v[]);
void glMultiTexCoord3fARB(unsigned int target, float s, float t, float r);
void glMultiTexCoord3fvARB(unsigned int target, [in] float v[]);
void glMultiTexCoord3iARB(unsigned int target, int s, int t, int r);
void glMultiTexCoord3ivARB(unsigned int target, [in] int v[]);
void glMultiTexCoord3sARB(unsigned int target, short s, short t, short r);
void glMultiTexCoord3svARB(unsigned int target, [in] short v[]);
void glMultiTexCoord4dARB(unsigned int target, double s, double t, double r, double q);
void glMultiTexCoord4dvARB(unsigned int target, [in] double v[]);
void glMultiTexCoord4fARB(unsigned int target, float s, float t, float r, float q);
void glMultiTexCoord4fvARB(unsigned int target, [in] float v[]);
void glMultiTexCoord4iARB(unsigned int target, int s, int t, int r, int q);
void glMultiTexCoord4ivARB(unsigned int target, [in] int v[]);
void glMultiTexCoord4sARB(unsigned int target, short s, short t, short r, short q);
void glMultiTexCoord4svARB(unsigned int target, [in] short v[]);
void glBlendColorEXT( float red, float green, float blue, float alpha );
//void glPolygonOffsetEXT( float factor, float bias );
//void glTexImage3DEXT( unsigned int target, int level, unsigned int internalFormat, int width, int height, int depth, int border, unsigned int format, unsigned int type, [in,bigarray] void *pixels );
//void glTexSubImage3DEXT( unsigned int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, unsigned int format, unsigned int type, [in,bigarray] void *pixels);
//void glCopyTexSubImage3DEXT( unsigned int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );
//void glGenTexturesEXT( int n, [in] unsigned int textures[] );
//void glDeleteTexturesEXT( int n, [in] unsigned int textures[] );
//void glBindTextureEXT( unsigned int target, unsigned int texture );
// void glPrioritizeTexturesEXT( int n, [in] unsigned int textures[], [in] float
    // priorities[] );
//unsigned char glAreTexturesResidentEXT( int n, [in] unsigned int *textures, unsigned char *residences );
//unsigned char glIsTextureEXT( unsigned int texture );
//void glVertexPointerEXT( int size, unsigned int type, int stride, int count, [in,bigarray] void *ptr );
//void glNormalPointerEXT( unsigned int type, int stride, int count, [in,bigarray] void *ptr );
//void glColorPointerEXT( int size, unsigned int type, int stride, int count, [in,bigarray] void *ptr );
//void glIndexPointerEXT( unsigned int type, int stride, int count, [in,bigarray] void *ptr );
//void glTexCoordPointerEXT( int size, unsigned int type, int stride, int count, [in,bigarray] void *ptr );
//void glEdgeFlagPointerEXT( int stride, int count, [in] unsigned char *ptr );
//void glGetPointervEXT( unsigned int pname, void *params[] );
//void glArrayElementEXT( int i );
//void glDrawArraysEXT( unsigned int mode, int first, int count );
//void glBlendEquationEXT( unsigned int mode );
void glPointParameterfEXT( unsigned int pname, float param );
void glPointParameterfvEXT( unsigned int pname, [in] float params[] );
//void glPointParameterfSGIS(unsigned int pname, float param);
//void glPointParameterfvSGIS(unsigned int pname, [in] float params[]);
//void glColorTableEXT( unsigned int target, unsigned int internalformat, int width, unsigned int format, unsigned int type, [in,bigarray] void *table );
//void glColorSubTableEXT( unsigned int target, int start, int count, unsigned int format, unsigned int type, [in,bigarray] void *data );
//void glGetColorTableEXT( unsigned int target, unsigned int format, unsigned int type, void *table );
//void glGetColorTableParameterfvEXT( unsigned int target, unsigned int pname, float params[] );
//void glGetColorTableParameterivEXT( unsigned int target, unsigned int pname, int params[] );
void glLockArraysEXT( int first, int count );
void glUnlockArraysEXT( void );
/*
void glWindowPos2iMESA( int x, int y );
void glWindowPos2sMESA( short x, short y );
void glWindowPos2fMESA( float x, float y );
void glWindowPos2dMESA( double x, double y );
void glWindowPos2ivMESA( [in] int p[2] );
void glWindowPos2svMESA( [in] short p[2] );
void glWindowPos2fvMESA( [in] float p[2] );
void glWindowPos2dvMESA( [in] double p[2] );
void glWindowPos3iMESA( int x, int y, int z );
void glWindowPos3sMESA( short x, short y, short z );
void glWindowPos3fMESA( float x, float y, float z );
void glWindowPos3dMESA( double x, double y, double z );
void glWindowPos3ivMESA( [in] int p[3] );
void glWindowPos3svMESA( [in] short p[3] );
void glWindowPos3fvMESA( [in] float p[3] );
void glWindowPos3dvMESA( [in] double p[3] );
void glWindowPos4iMESA( int x, int y, int z, int w );
void glWindowPos4sMESA( short x, short y, short z, short w );
void glWindowPos4fMESA( float x, float y, float z, float w );
void glWindowPos4dMESA( double x, double y, double z, double w);
void glWindowPos4ivMESA( [in] int p[4] );
void glWindowPos4svMESA( [in] short p[4] );
void glWindowPos4fvMESA( [in] float p[4] );
void glWindowPos4dvMESA( [in] double p[4] );
void glResizeBuffersMESA( void );
*/
